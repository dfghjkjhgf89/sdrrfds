import asyncio
import logging
import re
import datetime
from functools import wraps
import aiohttp

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

from config import (
    BOT_TOKEN,
    DEFAULT_REFERRAL_STATUS,
    ADMIN_TG_ACCOUNT,
    BOT_USERNAME,
    COMPANY_NAME,
    COMPANY_REGISTRATION_NUMBER,
    COMPANY_ADDRESS,
    COMPANY_BANK,
    COMPANY_ACCOUNT,
    COMPANY_SWIFT,
    COMPANY_IBAN
)
from database import init_db, get_db
from models import User, Subscription, Whitelist, PromoCode

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)

class RegistrationStates(StatesGroup):
    waiting_for_email = State()
    waiting_for_promo = State()

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç"), KeyboardButton(text="üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∏"), KeyboardButton(text="‚è≥ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞")],
        [KeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
    ],
    resize_keyboard=True
)

def is_valid_email(email: str) -> bool:
    return "@" in email and "." in email

def check_registered_active(func):
    @wraps(func)
    async def wrapper(message_or_cq: types.Message | types.CallbackQuery, state: FSMContext | None = None, *args, **kwargs):
        if isinstance(message_or_cq, types.Message):
            user_tg = message_or_cq.from_user
            target_message = message_or_cq
        elif isinstance(message_or_cq, types.CallbackQuery):
            user_tg = message_or_cq.from_user
            target_message = message_or_cq.message
            await message_or_cq.answer()
        else:
            logger.error(f"check_registered_active applied to unsupported type: {type(message_or_cq)}")
            return

        telegram_id = user_tg.id
        user_db: User | None = None

        with get_db() as db:
            user_db = db.query(User).filter(User.telegram_id == telegram_id).first()

            if not user_db or not user_db.email or user_db.email.startswith("temp_") or not user_db.is_active:
                logger.warning(f"Access denied for {telegram_id} by check_registered_active: Not registered, no email, or inactive.")
                await target_message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (–∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω), –∏—Å–ø–æ–ª—å–∑—É—è /start.")
                if state and (not user_db or not user_db.email or user_db.email.startswith("temp_")):
                    logger.info(f"Redirecting user {telegram_id} to email input.")
                    if not user_db:
                        await state.update_data(new_telegram_id=telegram_id, new_username=user_tg.username)
                    else:
                        await state.update_data(user_id_to_update=user_db.id)
                    await target_message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=ReplyKeyboardRemove())
                    await state.set_state(RegistrationStates.waiting_for_email)
                return

            kwargs['user'] = user_db
            return await func(message_or_cq, *args, **kwargs)

    return wrapper

def check_access(handler):
    @wraps(handler)
    async def wrapper(message_or_cq: types.Message | types.CallbackQuery, state: FSMContext | None = None, *args, **kwargs):
        if isinstance(message_or_cq, types.Message):
            user_tg = message_or_cq.from_user
            target_message = message_or_cq
        elif isinstance(message_or_cq, types.CallbackQuery):
            user_tg = message_or_cq.from_user
            target_message = message_or_cq.message
            await message_or_cq.answer()
        else:
            logger.error(f"check_access applied to unsupported type: {type(message_or_cq)}")
            return
        
        telegram_id = user_tg.id
        user_db: User | None = None
        access_granted = False
        now = datetime.datetime.now(datetime.timezone.utc)

        with get_db() as db:
            user_db = db.query(User).filter(User.telegram_id == telegram_id).first()

            if not user_db or not user_db.email or user_db.email.startswith("temp_") or not user_db.is_active:
                logger.warning(f"Access denied for {telegram_id} by check_access: Not registered, no email, or inactive.")
                await target_message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (–∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω), –∏—Å–ø–æ–ª—å–∑—É—è /start.")
                if state and (not user_db or not user_db.email or user_db.email.startswith("temp_")):
                     logger.info(f"Redirecting user {telegram_id} to email input.")
                     if not user_db:
                         await state.update_data(new_telegram_id=telegram_id, new_username=user_tg.username)
                     else:
                         await state.update_data(user_id_to_update=user_db.id)
                     await target_message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=ReplyKeyboardRemove())
                     await state.set_state(RegistrationStates.waiting_for_email)
                return

            logger.debug(f"Checking whitelist for telegram_id: {telegram_id} (type: {type(telegram_id)})")
            whitelist_entry = db.query(Whitelist).filter(Whitelist.telegram_id == telegram_id).first()
            logger.debug(f"Whitelist query result for {telegram_id}: {whitelist_entry}")
            is_whitelisted = whitelist_entry is not None
            if is_whitelisted:
                logger.info(f"Access granted for {telegram_id}: Whitelisted.")
                access_granted = True
            else:
                active_subscription = (db.query(Subscription)
                                       .filter(Subscription.user_id == user_db.id)
                                       .filter(Subscription.end_date > now)
                                       .order_by(Subscription.end_date.desc())
                                       .first())
                if active_subscription:
                    logger.info(f"Access granted for {telegram_id}: Active subscription until {active_subscription.end_date}.")
                    access_granted = True

            if access_granted:
                kwargs['user'] = user_db
                return await handler(message_or_cq, *args, **kwargs)
            else:
                logger.warning(f"Access denied for {telegram_id}: No active subscription or whitelist entry.")
                await target_message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É.")
                return

    return wrapper

@dp.message(CommandStart())
async def handle_start(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    logger.info(f"User {telegram_id} ({username}) started the bot.")

    start_param = message.text.split()[1] if len(message.text.split()) > 1 else None
    
    if start_param:
        if start_param == "offer":
            await message.answer(
                "–ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
                "https://docs.google.com/document/d/1tgPqQTkjQDgftj-a0vNOgs53mi7-sctjv4WJ2BF9DTA/edit",
                disable_web_page_preview=True
            )
            return
        elif start_param == "privacy":
            await message.answer(
                "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
                "https://docs.google.com/document/d/10s0vc9sBXMeC8a-_VGSXzCPi0Z5k4AMy/edit",
                disable_web_page_preview=True
            )
            return

    with get_db() as db:
        user = db.query(User).filter(User.telegram_id == telegram_id).first()

        if user:
            logger.info(f"User {telegram_id} already exists.")
            if not user.is_active:
                await message.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
                return
            if not user.email or user.email.startswith("temp_"):
                logger.info(f"User {telegram_id} needs email. Setting state.")
                await state.update_data(user_id_to_update=user.id)
                await message.answer(
                    f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}! –ü–æ—Ö–æ–∂–µ, –≤–∞—à email –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
                    reply_markup=ReplyKeyboardRemove()
                )
                await state.set_state(RegistrationStates.waiting_for_email)
            else:
                await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}!", reply_markup=main_keyboard)
        else:
            logger.info(f"New user: {telegram_id} ({username}). Requesting email.")
            await state.update_data(
                new_telegram_id=telegram_id,
                new_username=username
            )
            await message.answer(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}! "
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É.",
                reply_markup=ReplyKeyboardRemove()
            )
            await state.set_state(RegistrationStates.waiting_for_email)

@dp.message(RegistrationStates.waiting_for_email, F.text)
async def handle_email(message: types.Message, state: FSMContext):
    email = message.text.strip()
    logger.info(f"Received email attempt: {email} from user {message.from_user.id}")

    if not is_valid_email(email):
        await message.answer("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.")
        return

    with get_db() as db:
        existing_user_by_email = db.query(User).filter(User.email == email).first()
        user_data = await state.get_data()
        user_id_to_update = user_data.get('user_id_to_update')

        if existing_user_by_email and (not user_id_to_update or existing_user_by_email.id != user_id_to_update):
                await message.answer("–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π email.")
                return

        if user_id_to_update:
            user_to_update = db.query(User).filter(User.id == user_id_to_update).first()
            if user_to_update:
                user_to_update.email = email
                db.commit()
                logger.info(f"Email updated for user {user_to_update.telegram_id}.")
                await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à email –æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=main_keyboard)
                await state.clear()
            else:
                logger.error(f"Could not find user with id {user_id_to_update} to update email.")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start —Å–Ω–æ–≤–∞.")
                await state.clear()
        else:
            new_telegram_id = user_data.get('new_telegram_id')
            new_username = user_data.get('new_username')

            if not new_telegram_id:
                 logger.error(f"Missing new_telegram_id in state data for user {message.from_user.id}")
                 await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start —Å–Ω–æ–≤–∞.")
                 await state.clear()
                 return

            new_user = User(
                telegram_id=new_telegram_id,
                telegram_username=new_username,
                email=email
            )
            db.add(new_user)
            db.commit()
            logger.info(f"New user {new_telegram_id} registered with email {email}.")
            await message.answer("–°–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=main_keyboard)
            await state.clear()

@dp.message(RegistrationStates.waiting_for_email)
async def handle_email_incorrect_input(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email —Ç–µ–∫—Å—Ç–æ–º.")

@dp.message(F.text == "üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç")
@check_registered_active
async def handle_my_account(message: types.Message, *, user: User):
    logger.info(f"User {user.telegram_id} requested account info.")
    
    now = datetime.datetime.now(datetime.timezone.utc)
    access_status_text = "‚ùå –î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    with get_db() as db:
        is_whitelisted = db.query(Whitelist).filter(Whitelist.telegram_id == user.telegram_id).first() is not None
        if is_whitelisted:
            access_status_text = "‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –µ—Å—Ç—å (–±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫)"
        else:
            active_subscription = (db.query(Subscription)
                                   .filter(Subscription.user_id == user.id)
                                   .filter(Subscription.end_date > now)
                                   .order_by(Subscription.end_date.desc())
                                   .first())
            if active_subscription:
                end_date_str = active_subscription.end_date.strftime("%d.%m.%Y %H:%M")
                access_status_text = f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –µ—Å—Ç—å (–¥–æ {end_date_str} UTC)"

    account_info = (
        f"üë§ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç:\n"
        f"\nüÜî Telegram ID: `{user.telegram_id}`"
        f"\nüìß Email: `{user.email}`"
        f"\n\n{access_status_text}"
    )
    await message.answer(account_info, parse_mode="Markdown")

@dp.message(F.text == "üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
@check_access
async def handle_referral_link(message: types.Message, *, user: User):
    logger.info(f"User {user.telegram_id} requested referral link.")
    
    start_param = user.referral_link_override if user.referral_link_override else user.telegram_id
    
    ref_link = f"https://t.me/{BOT_USERNAME}?start={start_param}"
    
    await message.answer(f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`{ref_link}`", parse_mode="Markdown")

@dp.message(F.text == "üìä –°—Ç–∞—Ç—É—Å —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∏")
@check_access
async def handle_referral_status(message: types.Message, *, user: User):
    logger.info(f"User {user.telegram_id} requested referral status.")
    status_flag = user.referral_status_override
    if status_flag is None:
        status_flag = DEFAULT_REFERRAL_STATUS

    status_icon = "‚úÖ" if status_flag else "‚ùå"
    status_text = "–ê–∫—Ç–∏–≤–Ω–∞" if status_flag else "–ù–µ –∞–∫—Ç–∏–≤–Ω–∞"

    await message.answer(f"üìä –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {status_icon} ({status_text})")

@dp.message(F.text == "‚è≥ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞")
@check_registered_active
async def handle_my_subscription(message: types.Message, *, user: User):
    logger.info(f"User {user.telegram_id} requested subscription status.")
    now = datetime.datetime.now(datetime.timezone.utc)
    
    with get_db() as db:
        active_subscription = (db.query(Subscription)
                               .filter(Subscription.user_id == user.id)
                               .filter(Subscription.end_date > now)
                               .order_by(Subscription.end_date.desc())
                               .first())
        is_whitelisted = db.query(Whitelist).filter(Whitelist.telegram_id == user.telegram_id).first() is not None
        
        if active_subscription:
            end_date_str = active_subscription.end_date.strftime("%d.%m.%Y %H:%M UTC")
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_access"),
                        InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promo")
                    ],
                    [InlineKeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂", callback_data="disable_auto_renewal")]
                ]
            )
            
            await message.answer(
                f"‚úÖ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –æ–±—É—á–∞—é—â–µ–º—É –∫—É—Ä—Å—É –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: {end_date_str}\n\n"
                f"{'üîÑ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –≤–∫–ª—é—á–µ–Ω' if active_subscription.auto_renewal else '‚ùå –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª—é—á–µ–Ω'}\n\n"
                "–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=keyboard
            )
        elif is_whitelisted:
            await message.answer(
                "‚úÖ –£ –≤–∞—Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É (–±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫)."
            )
        else:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å 1500‚ÇΩ", callback_data="process_payment"),
                        InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promo")
                    ],
                    [InlineKeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂", callback_data="disable_auto_renewal")]
                ]
            )
            await message.answer(
                "üìö –ü—Ä–æ–¥—É–∫—Ç: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç \"–°–ò–°–¢–ï–ú–ù–ò–ö –£–ë–¢ –ü–†–ò–í–ê–¢\"\n\n"
                "üóì –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: –°–ò–°–¢–ï–ú–ù–ò–ö –£–ë–¢ (–ö–∞—Ä—Ç–∞ –†–§)\n\n"
                "‚Äî –¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞: –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30d 0h 0m\n"
                "‚Äî –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: 1500 RUB\n\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø:\n\n"
                "‚Äî –ì—Ä—É–ø–ø–∞ ¬´–°–ò–°–¢–ï–ú–ù–ò–ö –£–ë–¢ –ü–†–ò–í–ê–¢¬ª\n\n"
                "–û–ø–ª–∞—á–∏–≤–∞—è –ø–æ–¥–ø–∏—Å–∫—É –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è "
                "[–ü—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã](https://docs.google.com/document/d/1tgPqQTkjQDgftj-a0vNOgs53mi7-sctjv4WJ2BF9DTA/edit) –∏ "
                "[–ü–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://docs.google.com/document/d/10s0vc9sBXMeC8a-_VGSXzCPi0Z5k4AMy/edit)",
                reply_markup=keyboard,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )

@dp.callback_query(F.data == "enter_promo")
async def handle_enter_promo(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
    await state.set_state(RegistrationStates.waiting_for_promo)
    await callback.answer()

@dp.message(RegistrationStates.waiting_for_promo)
async def handle_promo_code(message: types.Message, state: FSMContext):
    promo_code = message.text.strip().upper()
    with get_db() as db:
        promo = db.query(PromoCode).filter(
            PromoCode.code == promo_code,
            PromoCode.is_active == True
        ).first()
        
        if not promo:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy_access")]
                ]
            )
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø'.",
                reply_markup=keyboard
            )
            return
            
        if promo.max_uses is not None and promo.used_count >= promo.max_uses:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy_access")]
                ]
            )
            await message.answer(
                "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑.",
                reply_markup=keyboard
            )
            return
            
        original_price = 1500
        discount = original_price * (promo.discount_percent / 100)
        final_price = original_price - discount
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –∑–∞ {int(final_price)}‚ÇΩ",
                        callback_data=f"buy_access_with_promo_{promo.id}"
                    )
                ]
            ]
        )
        
        await message.answer(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω!\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {int(final_price)}‚ÇΩ\n"
            f"<s>1500‚ÇΩ</s>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.clear()

@dp.callback_query(F.data.startswith("buy_access_with_promo_"))
async def handle_buy_with_promo(callback: types.CallbackQuery):
    promo_id = int(callback.data.split("_")[-1])
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ")

@dp.callback_query(F.data == "buy_access")
async def handle_buy_access(callback: types.CallbackQuery):
    text = (
        "üìö –ü—Ä–æ–¥—É–∫—Ç: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç \"–°–ò–°–¢–ï–ú–ù–ò–ö –£–ë–¢ –ü–†–ò–í–ê–¢\"\n\n"
        "üóì –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: –°–ò–°–¢–ï–ú–ù–ò–ö –£–ë–¢ (–ö–∞—Ä—Ç–∞ –†–§)\n\n"
        "‚Äî –¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞: –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30d 0h 0m\n"
        "‚Äî –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: 1500 RUB\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø:\n\n"
        "‚Äî –ì—Ä—É–ø–ø–∞ ¬´–°–ò–°–¢–ï–ú–ù–ò–ö –£–ë–¢ –ü–†–ò–í–ê–¢¬ª\n\n"
        "–û–ø–ª–∞—á–∏–≤–∞—è –ø–æ–¥–ø–∏—Å–∫—É –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è "
        "[–ü—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã](https://docs.google.com/document/d/1tgPqQTkjQDgftj-a0vNOgs53mi7-sctjv4WJ2BF9DTA/edit) –∏ "
        "[–ü–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://docs.google.com/document/d/10s0vc9sBXMeC8a-_VGSXzCPi0Z5k4AMy/edit)"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å 1500‚ÇΩ", callback_data="process_payment")],
            [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promo")]
        ]
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown", disable_web_page_preview=True)
    await callback.answer()

@dp.callback_query(F.data == "show_offer")
async def handle_show_offer(callback: types.CallbackQuery):
    offer_text = (
        "üìú *–ü–£–ë–õ–ò–ß–ù–ê–Ø –û–§–ï–†–¢–ê*\n\n"
        "1. –û–ë–©–ò–ï –ü–û–õ–û–ñ–ï–ù–ò–Ø\n\n"
        "1.1. –ù–∞—Å—Ç–æ—è—â–∞—è –æ—Ñ–µ—Ä—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä –Ω–∞ –æ–∫–∞–∑–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —É—Å–ª—É–≥.\n"
        "1.2. –ê–∫—Ü–µ–ø—Ç–æ–º –æ—Ñ–µ—Ä—Ç—ã —è–≤–ª—è–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥.\n\n"
        "2. –£–°–õ–û–í–ò–Ø –ü–û–î–ü–ò–°–ö–ò\n\n"
        "2.1. –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ 30 –¥–Ω–µ–π.\n"
        "2.2. –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
        "2.3. –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–æ–∑–º–æ–∂–Ω–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n\n"
        "[–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ñ–µ—Ä—Ç—ã](https://docs.google.com/document/d/1tgPqQTkjQDgftj-a0vNOgs53mi7-sctjv4WJ2BF9DTA/edit)"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="buy_access")]]
    )
    
    await callback.message.edit_text(offer_text, reply_markup=keyboard, parse_mode="Markdown", disable_web_page_preview=True)
    await callback.answer()

@dp.callback_query(F.data == "show_privacy")
async def handle_show_privacy(callback: types.CallbackQuery):
    privacy_text = (
        "üîí *–ü–û–õ–ò–¢–ò–ö–ê –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û–°–¢–ò*\n\n"
        "1. –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–•\n\n"
        "1.1. –ú—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥.\n"
        "1.2. –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n\n"
        "2. –•–†–ê–ù–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò\n\n"
        "2.1. –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö.\n"
        "2.2. –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º.\n\n"
        "[–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª–∏—Ç–∏–∫–∏](https://docs.google.com/document/d/10s0vc9sBXMeC8a-_VGSXzCPi0Z5k4AMy/edit)"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="buy_access")]]
    )
    
    await callback.message.edit_text(privacy_text, reply_markup=keyboard, parse_mode="Markdown", disable_web_page_preview=True)
    await callback.answer()

@dp.callback_query(F.data == "show_requisites")
async def handle_show_requisites(callback: types.CallbackQuery):
    requisites_text = (
        "üìã *–†–ï–ö–í–ò–ó–ò–¢–´ –ö–û–ú–ü–ê–ù–ò–ò*\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {COMPANY_NAME}\n"
        f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {COMPANY_REGISTRATION_NUMBER}\n"
        f"–ê–¥—Ä–µ—Å: {COMPANY_ADDRESS}\n\n"
        "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
        f"–ë–∞–Ω–∫: {COMPANY_BANK}\n"
        f"–°—á–µ—Ç: {COMPANY_ACCOUNT}\n"
        f"SWIFT: {COMPANY_SWIFT}\n"
        f"IBAN: {COMPANY_IBAN}"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="buy_access")]]
    )
    
    await callback.message.edit_text(requisites_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@dp.callback_query(F.data == "process_payment")
async def handle_process_payment(callback: types.CallbackQuery):
    await callback.message.answer(
        "üìö –ü—Ä–æ–¥—É–∫—Ç: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç \"–°–ò–°–¢–ï–ú–ù–ò–ö –£–ë–¢ –ü–†–ò–í–ê–¢\"\n\n"
        "üóì –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: –°–ò–°–¢–ï–ú–ù–ò–ö –£–ë–¢ (–ö–∞—Ä—Ç–∞ –†–§)\n\n"
        "‚Äî –¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞: –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30d 0h 0m\n"
        "‚Äî –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: 1500 RUB\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø:\n\n"
        "‚Äî –ì—Ä—É–ø–ø–∞ ¬´–°–ò–°–¢–ï–ú–ù–ò–ö –£–ë–¢ –ü–†–ò–í–ê–¢¬ª\n\n"
        "–û–ø–ª–∞—á–∏–≤–∞—è –ø–æ–¥–ø–∏—Å–∫—É –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è "
        "[–ü—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã](https://docs.google.com/document/d/1tgPqQTkjQDgftj-a0vNOgs53mi7-sctjv4WJ2BF9DTA/edit) –∏ "
        "[–ü–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://docs.google.com/document/d/10s0vc9sBXMeC8a-_VGSXzCPi0Z5k4AMy/edit)",
        parse_mode="Markdown",
        disable_web_page_preview=True
    )
    await callback.answer()

@dp.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def handle_support(message: types.Message):
    logger.info(f"User {message.from_user.id} requested support info.")
    support_contact = f"@{ADMIN_TG_ACCOUNT}"
    text = (
        "–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∏—Ç—å, —á–∏—Ç–∞–µ–º:\n\n"
        "‚ö†Ô∏è –ë–æ—Ç –∏–Ω–æ–≥–¥–∞ –Ω–µ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –±–æ–ª—å—à–∏–º–∏ –Ω–∞–ø–ª—ã–≤–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. "
        "–ü—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, –∏–ª–∏ —á–µ—Ä–µ–∑ —á–∞—Å, –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Ä–∞–Ω–æ –∏–ª–∏ –ø–æ–∑–¥–Ω–æ –≤—Å—ë –ø—Ä–æ–≥—Ä—É–∑–∏—Ç—Å—è!\n\n"
        f"üì® –¢–æ–ª—å–∫–æ –ø–æ –¥–æ–ª–≥–∏–º –ø—Ä–æ–±–ª–µ–º–∞–º —Å –æ–ø–ª–∞—Ç–æ–π ‚Äî {support_contact}"
    )
    await message.answer(text)

@dp.message(F.text)
@check_access
async def handle_unknown_text(message: types.Message, *, user: User):
    logger.warning(f"User {user.telegram_id} sent unknown text: {message.text}")
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.", reply_markup=main_keyboard)

@dp.callback_query(F.data == "disable_auto_renewal")
@check_registered_active
async def handle_disable_auto_renewal(callback: types.CallbackQuery, *, user: User):
    logger.info(f"User {user.telegram_id} requested to disable auto renewal.")
    now = datetime.datetime.now(datetime.timezone.utc)
    
    with get_db() as db:
        active_subscription = (db.query(Subscription)
                               .filter(Subscription.user_id == user.id)
                               .filter(Subscription.end_date > now)
                               .order_by(Subscription.end_date.desc())
                               .first())
        
        if active_subscription:
            active_subscription.auto_renewal = False
            db.commit()
        
        await callback.message.edit_text(
            "–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã! ‚úÖ\n"
            "–í —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ –Ω–µ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–µ", callback_data="show_subscription")]
                ]
            )
        )

@dp.callback_query(F.data == "show_subscription")
@check_registered_active
async def handle_show_subscription(callback: types.CallbackQuery, *, user: User):
    now = datetime.datetime.now(datetime.timezone.utc)
    
    with get_db() as db:
        active_subscription = (db.query(Subscription)
                               .filter(Subscription.user_id == user.id)
                               .filter(Subscription.end_date > now)
                               .order_by(Subscription.end_date.desc())
                               .first())
        is_whitelisted = db.query(Whitelist).filter(Whitelist.telegram_id == user.telegram_id).first() is not None
        
        if active_subscription:
            end_date_str = active_subscription.end_date.strftime("%d.%m.%Y %H:%M UTC")
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_access"),
                        InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promo")
                    ],
                    [InlineKeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂", callback_data="disable_auto_renewal")]
                ]
            )
            
            await callback.message.edit_text(
                f"‚úÖ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –æ–±—É—á–∞—é—â–µ–º—É –∫—É—Ä—Å—É –∞–∫—Ç–∏–≤–µ–Ω –¥–æ: {end_date_str}\n\n"
                f"{'üîÑ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –≤–∫–ª—é—á–µ–Ω' if active_subscription.auto_renewal else '‚ùå –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª—é—á–µ–Ω'}\n\n"
                "–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=keyboard
            )
        elif is_whitelisted:
            await callback.message.edit_text(
                "‚úÖ –£ –≤–∞—Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É (–±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫)."
            )
        else:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å 1500‚ÇΩ", callback_data="process_payment"),
                        InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promo")
                    ],
                    [InlineKeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂", callback_data="disable_auto_renewal")]
                ]
            )
            await callback.message.edit_text(
                "üìö –ü—Ä–æ–¥—É–∫—Ç: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç \"–°–ò–°–¢–ï–ú–ù–ò–ö –£–ë–¢ –ü–†–ò–í–ê–¢\"\n\n"
                "üóì –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: –°–ò–°–¢–ï–ú–ù–ò–ö –£–ë–¢ (–ö–∞—Ä—Ç–∞ –†–§)\n\n"
                "‚Äî –¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞: –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30d 0h 0m\n"
                "‚Äî –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: 1500 RUB\n\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø:\n\n"
                "‚Äî –ì—Ä—É–ø–ø–∞ ¬´–°–ò–°–¢–ï–ú–ù–ò–ö –£–ë–¢ –ü–†–ò–í–ê–¢¬ª\n\n"
                "–û–ø–ª–∞—á–∏–≤–∞—è –ø–æ–¥–ø–∏—Å–∫—É –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è "
                "[–ü—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã](https://docs.google.com/document/d/1tgPqQTkjQDgftj-a0vNOgs53mi7-sctjv4WJ2BF9DTA/edit) –∏ "
                "[–ü–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://docs.google.com/document/d/10s0vc9sBXMeC8a-_VGSXzCPi0Z5k4AMy/edit)",
                reply_markup=keyboard,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
    await callback.answer()

async def main():
    logger.info("Initializing database...")
    init_db()
    logger.info("Database initialized.")

    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("Webhook deleted successfully")
    except Exception as e:
        logger.error(f"Failed to delete webhook: {e}")

    logger.info("Starting bot polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped.") 